library(tidyverse)
library(RSelenium)
# Configuro el servidor
rdriver <- rsDriver(browser = "firefox")
remDr <- rdriver[["client"]]
# Activo navegación
web_empresas <- "https://parquesindustriales.com.ar/empresas"
remDr$navigate(web_empresas)
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
elemento <- paste0(emp_i, 1, ']')
elemento$getElementText()
elemento_texto <- remDr$findElement('xpath', elemento)
elemento_texto$getElementText() %>% unlist(.)
elemento_texto$getElementText() %>% unlist(.) %>% ifelse(length(.) == 0, NA, .)
elemento_texto$getElementText() %>% unlist(.) %>% str_split("\n")
# Ejecución del bot
repag <- NULL
df <- NULL
elemento_texto$getElementText() %>% unlist(.) %>% str_split("\n")datos %>%
elemento_texto$getElementText() %>% unlist(.) %>% str_split("\n")  %>%
map(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación"))) %>%
bind_rows()
# Ejecución del bot
repag <- NULL
df <- NULL
boton_siguiente <- remDr$findElement('xpath', '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]') # elemento boton
# Ejecución del bot
repag <- NULL
df <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
for (i in 1:11) {
elemento <- paste0(emp_i, i, ']')
elemento_texto <- remDr$findElement('xpath', elemento)
resultado <- tryCatch({
suppressMessages({
texto <- elemento_texto$getElementText() %>% unlist(.) %>% ifelse(length(.) == 0, NA, .)
print(texto %>% str_split("\n")  %>% .[[1]] %>% head(1))
})
},
error = function(e) {
NA_character_
}
)
empresas <- rbind(df, texto)
}
View(empresas)
empresas <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
for (i in 1:11) {
elemento <- paste0(emp_i, i, ']')
elemento_texto <- remDr$findElement('xpath', elemento)
resultado <- tryCatch({
suppressMessages({
texto <- elemento_texto$getElementText() %>% unlist(.) %>% ifelse(length(.) == 0, NA, .)
print(texto %>% str_split("\n")  %>% .[[1]] %>% head(1))
})
},
error = function(e) {
NA_character_
}
)
empresas <- rbind(empresas, texto)
}
View(empresas)
# Mapear para convertir a dataframe
empresas %>%
map(~ set_names(., c("Empresa", "Descripción", 'web', "Campo1", "Ubicación"))) %>%
bind_rows()
# Mapear para convertir a dataframe
empresas %>%
map(~ set_names(., c("Empresa", "Descripción" "Campo1", "Ubicación"))) %>%
# Mapear para convertir a dataframe
empresas %>%
map(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación"))) %>%
bind_rows()
empresas %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.))))
empresas
empresas %>%
map(~ .[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.))))
empresas %>%
map_df(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación")))
# Mapear para convertir a dataframe
empresas %>%
map(~ .[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.))))
# Mapear para convertir a dataframe
empresas %>%
map(~ .[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.)))) %>%
map_df(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación")))
source("C:/Users/sik20/OneDrive/Documentos/Github/parques-industriales/scrappint_empresas.R", echo=TRUE)
# Mapear para convertir a dataframe
empresas %>%
map(~ .[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.)))) %>%
map_df(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación"))) %>%
str_split("\n")
# Mapear para convertir a dataframe
empresas %>%
map(~ .[[1]]) %>%
map(~ str_split(., "\n")[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.))))
# Mapear para convertir a dataframe
empresas %>%
map(~ .[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.)))) %>%
map_df(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación")))
# Mapear para convertir a dataframe
prueba <- empresas %>%
map(~ .[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.)))) %>%
map_df(~ set_names(., c("Empresa", "Descripción", "Campo1", "Ubicación")))
View(prueba)
str_split(prueba$Empresa, "\n")
prueba2 <- str_split(prueba$Empresa, "\n")
View(prueba2)
prueba2 <- str_split(prueba$Empresa, "\n") %>% unlist(.)
prueba2 <- str_split(prueba$Empresa, "\n")
empresas
str(empresas)
as.list(empresas)
# Lista de empresas
empresas_lista <- as.list(empresas)
empresas_lista %>%
map(~ str_split(., "\n")[[1]]) %>%
map(~ if(length(.) == 4) . else c(., rep(NA, 4 - length(.))))
empresas_lista %>%
map(~ str_split(., "\n")[[1]])
lista_separada <- empresas_lista %>%
map(~ str_split(., "\n")[[1]])
# Encontrar la longitud máxima para las sublistas
max_length <- max(map_int(lista_separada, length))
# Asegurar que todas las sublistas tengan la misma longitud rellenando con NA si es necesario
empresas_uniformes <- lista_separada %>%
map(~ c(., rep(NA, max_length - length(.))))
View(empresas_uniformes)
# Convertir la lista uniforme en un tibble
tibble_data <- empresas_uniformes %>%
map_df(~ set_names(., paste0("Col", 1:max_length)))
View(tibble_data)
# Activo navegación
web_empresas <- "https://parquesindustriales.com.ar/empresas"
remDr$navigate(web_empresas)
# Ejecución del bot
repag <- NULL
empresas <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
# Ejecución del bot
empresas_totales <- NULL
empresas_xpag <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
boton <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]'
# Ejecución del bot
empresas_totales <- NULL
empresas_xpag <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
boton <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]'
print(texto %>% str_split("\n")  %>% .[[1]] %>% head(1))
# Ejecución del bot
empresas_totales <- NULL
empresas_xpag <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
boton <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]'
# 420 páginas son 419 clicks...
for (i in 1:10) {
print(paste0("Inicio página ", i, " - %", round(100*i/419, 2)))
for (j in 1:11) {
elemento <- paste0(emp_i, j, ']')
resultado <- tryCatch({
suppressMessages({
elemento_texto <- remDr$findElement('xpath', elemento)
texto <- elemento_texto$getElementText() %>% unlist(.) %>% ifelse(length(.) == 0, NA, .)
print(texto %>% str_split("\n")  %>% .[[1]] %>% head(1))
})
},
error = function(e) {
NA_character_
}
)
empresas_xpag <- rbind(empresas_xpag, texto)
}
# Uno datos
empresas_totales <- rbind(empresas_totales, empresas_xpag)
empresas_xpag <- NULL
# pulsamos el boton y esperamos dos segundos
boton_siguiente <- remDr$findElement('xpath', boton) # elemento boton
boton_siguiente$sendKeysToElement(list(key = "enter"))
print("Cambiando página...")
Sys.sleep(2)
}
write.csv(empresas_totales, "empresas_totales.csv", sep = ";")
write.csv(empresas_totales, "empresas_totales.csv")
library(tidyverse)
library(RSelenium)
# Configuro el servidor
rdriver <- rsDriver(browser = "firefox")
remDr <- rdriver[["client"]]
# Activo navegación
web_parques <- "https://parquesindustriales.com.ar/listado-parques"
remDr$navigate(web_parques)
# Primero vamos a necesitar un listado de parques con sus respectivos links (62 paginas)
df_completo <- NULL
df_xpag <- NULL
for (i in 1:10) {
print(paste0("Página ", i, "- %", round(100*i/62,2)))
for (j in 1:15) {
i_parque <- paste0('//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[', j, ']/button')
i_enlace <- paste0('//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[', j, ']/div/p/a')
resultado <- tryCatch({
suppressMessages({
nombre_parque <- remDr$findElement('xpath',  i_parque)
texto <- nombre_parque$getElementText() %>% unlist(.)
print(texto)
enlace <- remDr$findElement('xpath',  i_enlace)
link <- enlace$getElementAttribute("href")[[1]]
print(link)
})
},
error = function(e) {
NA_character_
return(NULL)
}
)
tmp <- data.frame(parque = texto, enlace = link)
df_paginado <- rbind(df_paginado, tmp)
rm(tmp)
}
# Cambio de página
boton_siguiente <- remDr$findElement('xpath', '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]') # elemento boton
boton_siguiente$sendKeysToElement(list(key = "enter"))
print("Cambiando página....")
Sys.sleep(3)
}
# Primero vamos a necesitar un listado de parques con sus respectivos links (62 paginas)
enlaces_empresas <- NULL
remDr$navigate(web_parques)
# Primero vamos a necesitar un listado de parques con sus respectivos links (62 paginas)
enlaces_empresas <- NULL
for (i in 1:10) {
print(paste0("Página ", i, "- %", round(100*i/62,2)))
for (j in 1:15) {
i_parque <- paste0('//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[', j, ']/button')
i_enlace <- paste0('//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[', j, ']/div/p/a')
resultado <- tryCatch({
suppressMessages({
nombre_parque <- remDr$findElement('xpath',  i_parque)
texto <- nombre_parque$getElementText() %>% unlist(.)
print(texto)
enlace <- remDr$findElement('xpath',  i_enlace)
link <- enlace$getElementAttribute("href")[[1]]
print(link)
})
},
error = function(e) {
NA_character_
return(NULL)
}
)
tmp <- data.frame(parque = texto, enlace = link)
enlaces_empresas <- rbind(enlaces_empresas, tmp)
tmp <- NULL
}
# Cambio de página
boton_siguiente <- remDr$findElement('xpath', '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]') # elemento boton
boton_siguiente$sendKeysToElement(list(key = "enter"))
print("Cambiando página....")
Sys.sleep(3)
}
View(enlaces_empresas)
View(enlaces_empresas)
# Limpieza rápida de la base
enlaces_empresas <- enlaces_empresas %>%
filter(parque != "◀ Anterior" & nchar(parque) > 1)
View(enlaces_empresas)
nchar(https://parquesindustriales.com.ar/parques/50884)
nchar("https://parquesindustriales.com.ar/parques/50884")
write_delim(enlaces_empresas, "links_parques.txt", delim = "\t")
write_csv(enlaces_empresas, "links_parques.csv")
prueba <- read_csv("empresas_totales.csv")
View(prueba)
# Se parte de datos enlistados por fila. Cada fila es una empresa. Algunas tienen web y otras no.
empresas <- prueba
# Lista de empresas
empresas_lista <- as.list(empresas)
lista_separada <- empresas_lista %>%
map(~ str_split(., "\n")[[1]])
# Encontrar la longitud máxima para las sublistas
max_length <- max(map_int(lista_separada, length))
# Asegurar que todas las sublistas tengan la misma longitud rellenando con NA si es necesario
empresas_uniformes <- lista_separada %>%
map(~ c(., rep(NA, max_length - length(.))))
# Convertir la lista uniforme en un tibble
tibble_data <- empresas_uniformes %>%
map_df(~ set_names(., paste0("Col", 1:max_length)))
View(tibble_data)
View(prueba)
View(lista_separada)
View(prueba)
prueba %>% str_split("\n")
library(tidyverse)
library(RSelenium)
# Configuro el servidor
rdriver <- rsDriver(browser = "firefox")
remDr <- rdriver[["client"]]
# Activo navegación
web_empresas <- "https://parquesindustriales.com.ar/empresas"
remDr$navigate(web_empresas)
# Ejecución del bot
empresas_totales <- NULL
empresas_xpag <- NULL
emp_i <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div['
boton <- '//*[@id="body"]/div[3]/div/div[1]/div[1]/div[3]/div/section/div[11]/button[3]'
# 420 páginas son 419 clicks...
for (i in 1:10) {
for (j in 1:11) {
elemento <- paste0(emp_i, j, ']')
resultado <- tryCatch({
suppressMessages({
elemento_texto <- remDr$findElement('xpath', elemento)
texto <- elemento_texto$getElementText() %>% unlist(.) %>% ifelse(length(.) == 0, NA, .)
print(texto %>% str_split("\n")  %>% .[[1]] %>% head(1))
})
},
error = function(e) {
NA_character_
}
)
empresas_xpag <- rbind(empresas_xpag, texto)
}
# Uno datos
empresas_totales <- rbind(empresas_totales, empresas_xpag)
empresas_xpag <- NULL
# pulsamos el boton y esperamos dos segundos
boton_siguiente <- remDr$findElement('xpath', boton) # elemento boton
boton_siguiente$sendKeysToElement(list(key = "enter"))
print(paste0("Realizada página ", i, " - %", round(100*i/419, 2)))
print("Cambiando página...")
Sys.sleep(2)
}
save(empresas_totales, file = "empresas_totales.RData")
rm(empresas_totales)
# Tratamiento de datos para empresas
load(file = "empresas_totales.RData")
# Se parte de datos enlistados por fila. Cada fila es una empresa. Algunas tienen web y otras no.
empresas <- empresas_totales
# Lista de empresas
empresas_lista <- as.list(empresas)
lista_separada <- empresas_lista %>%
map(~ str_split(., "\n")[[1]])
# Encontrar la longitud máxima para las sublistas
max_length <- max(map_int(lista_separada, length))
# Asegurar que todas las sublistas tengan la misma longitud rellenando con NA si es necesario
empresas_uniformes <- lista_separada %>%
map(~ c(., rep(NA, max_length - length(.))))
# Convertir la lista uniforme en un tibble
tibble_data <- empresas_uniformes %>%
map_df(~ set_names(., paste0("Col", 1:max_length)))
View(tibble_data)
